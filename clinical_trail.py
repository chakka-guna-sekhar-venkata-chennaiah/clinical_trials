import streamlit as st
import time 
import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow import keras
from PIL import Image
import base64
from io import BytesIO
#st.header('Clinical Trail')
#patient=5
 
def load_model():
    loaded_model = keras.models.load_model('tuned_model_classic.h5')
    return loaded_model

def value_mapper(df):
    value_mapping = {
                        'ржХрзЛржирзЛ ржжрзБрж░рзНржмрж▓рждрж╛ ржирзЗржЗ': 0,
                        'ржорж╛ржЭрж╛рж░рж┐ ржжрзБрж░рзНржмрж▓рждрж╛': 1,
                        'ржкрзНрж░ржЪржирзНржб ржжрзБрж░рзНржмрж▓рждрж╛': 2,
                        'рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ': 0,
                        'ржЕрж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ': 1,
                        'ржХрж┐ржЫрзБржЯрж╛ ржЕрж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ':1,
                        'ржмрзЗрж╢рж┐ ржЕрж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ': 2,
                    }
    converted_df=df.applymap(lambda x: value_mapping.get(x, 0))
    return converted_df.sum().sum()


def probability_score(score):
    if score <=1: return f'<15%'
    elif 2 <= score <=3: return f'30%'
    elif 4<= score <=6: return f'0%-85%'
    return f'0'
    
def get_table_download_link(df):
    excel_writer = BytesIO()
    df.to_excel(excel_writer)
    excel_writer.seek(0)
    b64 = base64.b64encode(excel_writer.read()).decode()
    href = f'<a href="data:file/csv;base64,{b64}" download="answers.xlsx">Download Answers as Excel Sheet</a>'
    return href
    
if 'patient' not in st.session_state:
    st.session_state.patient=1
patient=st.session_state.patient


#q1=st.selectbox('Is the patient on anticoagulant / blood thinner?',['yes', 'no', 'unknown'])
#q2=st.selectbox('How old is the patient?',['older than 80 years old', '80 years old or younger', 'age is unknown'])
#q3=st.selectbox('Did anyone see when the symptoms started?',['yes, enter time', 'no'])
#q4=st.selectbox('What time does the patient last seen well?',['yes, enter time', 'unknown'])

q5=st.selectbox('рж░рзЛржЧрзАрж░ рж╣рж╛ржд ржирж╛рзЬрж╛рждрзЗ ржХрзЛржирзЛ ржжрзБрж░рзНржмрж▓рждрж╛ ржЖржЫрзЗ ржХрж┐?',['ржХрзЛржирзЛ ржжрзБрж░рзНржмрж▓рждрж╛ ржирзЗржЗ', 'ржорж╛ржЭрж╛рж░рж┐ ржжрзБрж░рзНржмрж▓рждрж╛', 'ржкрзНрж░ржЪржирзНржб ржжрзБрж░рзНржмрж▓рждрж╛'])
q5_descrpt='''
    <div>
    ржЕржкрж╢ржирзЗрж░ ржмрж░рзНржгржирж╛:-
    </div>
    <div>
    ЁЯФ╕ ржХрзЛржирзЛ ржжрзБрж░рзНржмрж▓рждрж╛ ржирзЗржЗ : ржжрзБржЗ рж╣рж╛ржд рззрзж рж╕рзЗржХрзЗржирзНржбрзЗрж░ ржмрзЗрж╢рж┐ рждрзБрж▓рзЗ рж░рж╛ржЦрждрзЗ ржкрж╛рж░рзЗржи ржПржмржВ ржирж╛ржорж╛рждрзЗ ржкрж╛рж░рзЗржи 
    </div>
    <div>
    ЁЯФ╕ ржорж╛ржЭрж╛рж░рж┐ ржжрзБрж░рзНржмрж▓рждрж╛ : ржПржХржЯрж┐ рж╣рж╛ржд рждрзБрж▓рждрзЗ ржкрж╛рж░рзЗржи ржХрж┐ржирзНрждрзБ рззрзж рж╕рзЗржХрзЗржирзНржбрзЗрж░ ржмрзЗрж╢рж┐ рждрзБрж▓рзЗ рж░рж╛ржЦрждрзЗ ржкрж╛рж░рзЗржи ржирж╛  
    </div>
    ЁЯФ╕ рж░ржЪржирзНржб ржжрзБрж░рзНржмрж▓рждрж╛ : ржПржХржЯрж┐ ржЕржержмрж╛ ржжрзБржЗржЯрж┐ рж╣рж╛ржд ржирж┐ржЬрзЗ ржирж┐ржЬрзЗ ржПржХржжржоржЗ рждрзБрж▓рждрзЗ ржкрж╛рж░ржЫрзЗржи ржирж╛ 
    '''
st.markdown(q5_descrpt,unsafe_allow_html=True)
st.write(' ')
user_option=st.selectbox('ржЖржкржирж┐ ржХрж┐ ржЖржкржирж╛рж░ ржмрж░рзНрждржорж╛ржи ржорзБржЦрзЗрж░ ржЫржмрж┐ ржжрж┐рждрзЗ ржЖржЧрзНрж░рж╣рзА?',[' ','рж╣рзНржпрж╛ржБ','ржирж╛'])
if user_option=='рж╣рзНржпрж╛ржБ':
    uploaded_image = st.file_uploader("ржПржХржЯрж┐ ржЫржмрж┐ ржЪржпрж╝ржи ржХрж░рзБржи...", type=["jpg", "jpeg", "png"])

    if uploaded_image is not None:
        # Read the image and preprocess it
        loaded_model=load_model()
        class_labels=['Stroke','Non-Stroke']
        image = Image.open(uploaded_image)
        image = image.convert('RGB')
        image = image.resize((150, 150))  # Resize to match the model's input shape
        image = np.array(image)  # Convert PIL image to numpy array
        image = image / 255.0  # Normalize pixel values (similar to how you did in the model training)

        # Make prediction using the loaded model
        prediction = loaded_model.predict(np.expand_dims(image, axis=0))[0]
        predicted_class_index = np.argmax(prediction)
        predicted_class = class_labels[predicted_class_index]
        confidence = prediction[predicted_class_index]
        confidence = float(f'{confidence:.2f}') 
        if confidence>0.5:
            q6='ржЕрж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ'
        else:
            q6='рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ'
        
        # Display the uploaded image and the prediction
        st.image(image, caption=f'ржЪрж┐рждрзНрж░ ржЖржкрж▓рзЛржб', use_column_width=True)
        
        # Check if the predicted class is "Non-Stroke" and the confidence is high (you can adjust the threshold)
        if confidence > 0.5:
            st.write(f'рж╕рзНржЯрзНрж░рзЛржХ рж╣ржУржпрж╝рж╛рж░ рж╕ржорзНржнрж╛ржмржирж╛')
        else:
            st.write(f'рж╕рзНржЯрзНрж░рзЛржХ рж╣ржУржпрж╝рж╛рж░ рж╕ржорзНржнрж╛ржмржирж╛ ржирзЗржЗ')
   
        
elif user_option=='ржирж╛':
    q6_descrpt=''' 
    <div>
    ржЕржкрж╢ржирзЗрж░ ржмрж░рзНржгржирж╛:-
    </div>
    <div>
    ЁЯФ╕ рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ  : рж░рзЛржЧрзАрж░ ржЪрзЗрж╣рж╛рж░рж╛рж░ ржжрзБржЗ ржкрж╛рж╢ рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ 
    </div>
    ЁЯФ╕ ржЕрж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ  : рж░рзЛржЧрзАрж░ ржЪрзЗрж╣рж╛рж░рж╛рж░ ржПржХ ржкрж╛рж╢ ржмрзЗржБржХрзЗ ржЧрзЗржЫрзЗ
    '''
    
    st.write(' ')
    q6=st.selectbox('рж░рзЛржЧрзАрж░ ржорзБржЦрзЗрж░ ржжрзБрж░рзНржмрж▓рждрж╛ ржЖржЫрзЗ ржХрж┐?',['рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ', 'ржЕрж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ'])
    st.markdown(q6_descrpt,unsafe_allow_html=True)
    st.write(' ')
else:
    pass
st.write(' ')
q7=st.selectbox('рж░рзЛржЧрзА ржХржерж╛ ржмрж▓рждрзЗ ржкрж╛рж░ржЫрзЗ ржХрж┐ ржПржмржВ рж░рзЛржЧрзАржХрзЗ рзй ржЯрж┐ рж╕рж╛ржзрж╛рж░ржг ржЬрж┐ржирж┐рж╕рзЗрж░ ржирж╛ржо ржмрж▓рждрзЗ ржмрж▓рзБржи', ['рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ', 'ржЕрж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ'])
q7_descrpt='''
    <div>
    ржЕржкрж╢ржирзЗрж░ ржмрж░рзНржгржирж╛:-
    </div>
    <div>
    ЁЯФ╕ рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ : рж░рзЛржЧрзА рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ ржнрж╛ржмрзЗ рзй ржЯрж┐ ржЬрж┐ржирж┐рж╕рзЗрж░ ржирж╛ржо ржмрж▓рждрзЗ ржкрж╛рж░ржЫрзЗред 
    </div>
    ЁЯФ╕ ржЕрж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ : ржЕрж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ ржПржмржВ рзж-рзз ржЯрж┐ ржирж╛ржо ржарж┐ржХ ржнрж╛ржмрзЗ ржмрж▓ржЫрзЗржи
    '''
st.markdown(q7_descrpt,unsafe_allow_html=True)
st.write(' ')

q8=st.selectbox('рж░рзЛржЧрзАржХрзЗ рзи ржЯрж┐ ржЖржЩрзБрж▓ ржжрзЗржЦрж╛рждрзЗ ржмрж▓рзБржи', ['рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ', 'ржЕрж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ'])
q8_descrpt='''
    <div>
    ржЕржкрж╢ржирзЗрж░ ржмрж░рзНржгржирж╛:-
    </div>
    <div>
    ЁЯФ╕ рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ : рж░рзЛржЧрзА рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ ржнрж╛ржмрзЗ рзи ржЯрж┐ ржЖржЩрзБрж▓ ржжрзЗржЦрж╛рждрзЗ ржкрж╛рж░ржЫрзЗред  
    </div>
    ЁЯФ╕ржЕрж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ : ржЕрж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ ржПржмржВ рзж-рзз ржЯрж┐ ржирж╛ржо ржарж┐ржХ ржнрж╛ржмрзЗ ржмрж▓ржЫрзЗржи
     '''
st.markdown(q8_descrpt,unsafe_allow_html=True)
st.write(' ')
q9=st.selectbox('рж░рзЛржЧрзАрж░ ржЪрзЛржЦ ржПржХржжрж┐ржХрзЗ ржмрзЗржБржХрзЗ ржЧрзЗржЫрзЗ ржХрж┐?', ['рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ', 'ржХрж┐ржЫрзБржЯрж╛ ржЕрж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ', 'ржмрзЗрж╢рж┐ ржЕрж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ'])
q9_descrpt='''
    <div>
    ржЕржкрж╢ржирзЗрж░ ржмрж░рзНржгржирж╛:-
    </div>
    <div>
    ЁЯФ╕ рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ : ржПржХржЯрж┐ ржЖржЩрзБрж▓ ржжрзБржЗ ржЪрзЛржЦрзЗрж░ рж╕рж╛ржоржирзЗ ржирж╛рзЬрж╛рж▓рзЗ ржЪрзЛржЦрзЗрж░ ржоржгрж┐ рждрж╛ ржЕржирзБрж╕рж░ржг ржХрж░рждрзЗ ржкрж╛рж░рзЗ 
    </div>
    <div>
    ЁЯФ╕ ржХрж┐ржЫрзБржЯрж╛ ржЕрж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ : ржПржХржЯрж┐ ржЖржЩрзБрж▓ ржжрзБржЗ ржЪрзЛржЦрзЗрж░ рж╕рж╛ржоржирзЗ ржирж╛рзЬрж╛рж▓рзЗ ржЪрзЛржЦрзЗрж░ ржоржгрж┐ рждрж╛ ржЕржирзБрж╕рж░ржг ржХрж░рждрзЗ ржХрж╖рзНржЯ рж╣ржЪрзНржЫрзЗ 
    </div>
    ЁЯФ╕ ржмрзЗрж╢рж┐ ржЕрж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ : ржПржХржЯрж┐ ржЖржЩрзБрж▓ ржжрзБржЗ ржЪрзЛржЦрзЗрж░ рж╕рж╛ржоржирзЗ ржирж╛рзЬрж╛рж▓рзЗ ржЪрзЛржЦрзЗрж░ ржоржгрж┐ рждрж╛ ржЕржирзБрж╕рж░ржг ржХрж░рждрзЗ ржкрж╛рж░ржЫрзЗ ржирж╛
    '''
st.markdown(q9_descrpt,unsafe_allow_html=True)
#q10=st.selectbox('Ask the patient are you weak anywhere?', ['normal', 'abnormal'])
#q11=st.selectbox('Ask the patient who this arm belongs to?', ['normal', 'abnormal'])
    

 #   submitted=st.form_submit_button('Submit')
st.write(' ')
if st.button('ржЬржорж╛'):
    user_tracker={
                      #'Is the patient on anticoagulant / blood thinner?':[q1],
                      #'How old is the patient?':[q2],
                      #'Did anyone see when the symptoms started?':[q3],
                      #'What time does the patient last seen well?':[q4],

                      'рж░рзЛржЧрзАрж░ рж╣рж╛ржд ржирж╛рзЬрж╛рждрзЗ ржХрзЛржирзЛ ржжрзБрж░рзНржмрж▓рждрж╛ ржЖржЫрзЗ ржХрж┐?':[q5],
                      'рж░рзЛржЧрзАрж░ ржорзБржЦрзЗрж░ ржжрзБрж░рзНржмрж▓рждрж╛ ржЖржЫрзЗ ржХрж┐?':[q6],
                      'рж░рзЛржЧрзА ржХржерж╛ ржмрж▓рждрзЗ ржкрж╛рж░ржЫрзЗ ржХрж┐ ржПржмржВ рж░рзЛржЧрзАржХрзЗ рзй ржЯрж┐ рж╕рж╛ржзрж╛рж░ржг ржЬрж┐ржирж┐рж╕рзЗрж░ ржирж╛ржо ржмрж▓рждрзЗ ржмрж▓рзБржи':[q7],
                      'рж░рзЛржЧрзАржХрзЗ рзи ржЯрж┐ ржЖржЩрзБрж▓ ржжрзЗржЦрж╛рждрзЗ ржмрж▓рзБржи':[q8],
                      'рж░рзЛржЧрзАрж░ ржЪрзЛржЦ ржПржХржжрж┐ржХрзЗ ржмрзЗржБржХрзЗ ржЧрзЗржЫрзЗ ржХрж┐?':[q9],
                      #'Ask the patient are you weak anywhere?':[q10],
                      #'Ask the patient who this arm belongs to?':[q11],
                      'рж╕рзНржХрзЛрж░':[None],
                      'рж╕ржорзНржнрж╛ржмржирж╛-рж╢рждрж╛ржВрж╢':[None]}
    df=pd.DataFrame(user_tracker)
    df=df.T

    df.rename(columns={
            0:f'patient{patient}'
        },inplace=True)
    score=value_mapper(df)
    df.loc['рж╕рзНржХрзЛрж░']=score
    df.loc['рж╕ржорзНржнрж╛ржмржирж╛-рж╢рждрж╛ржВрж╢']=probability_score(score)
    pscore=probability_score(score)
    
    st.write(f'ржЖржкржирж╛рж░ рж╕рзНржЯрзНрж░рзЛржХ рж╣ржУржпрж╝рж╛рж░ рж╕ржорзНржнрж╛ржмржирж╛ : {probability_score(score)}')
    finalised_data=pd.read_csv('finalised_data.csv',index_col=['Unnamed: 0'])
    col_name=df.columns
    finalised_data[col_name[0]]=df.iloc[:,0:]
    finalised_data.to_csv('finalised_data.csv')
    st.session_state.patient=st.session_state.patient + 1
    
   
    if pscore=='<15%': st.info('''
                                ржЖржорж╛ржжрзЗрж░ ржмрж░рзНрждржорж╛ржи ржорзВрж▓рзНржпрж╛ржпрж╝ржирзЗ ржЖржкржирж╛рж░ рж╕рзНржЯрзНрж░рзЛржХ рж╣ржмрж╛рж░ рж╕ржорзНржнрж╛ржмржирж╛ рждрзБрж▓ржирж╛ржорзВрж▓ржХржнрж╛ржмрзЗ ржХржо (<15%)ред рждржмрзБржУ, ржЖржкржирж╛рж░ рж╕рзНржмрж╛рж╕рзНржерзНржп рж╕ржорзНржкрж░рзНржХрзЗ рж╕рждрж░рзНржХ ржерж╛ржХрж╛ ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржгред ржПржХржЯрж┐ рж╕рзНржмрж╛рж╕рзНржерзНржпржХрж░ ржЬрзАржмржиржзрж╛рж░рж╛ ржмржЬрж╛ржпрж╝ рж░рж╛ржЦрзБржи, 
                                ржпрзЗржХрзЛржирзЛ рж▓ржХрзНрж╖ржг ржирж┐рж░рзАржХрзНрж╖ржг ржХрж░рзБржи ржПржмржВ ржЖржкржирж╛рж░ ржбрж╛ржХрзНрждрж╛рж░рзЗрж░ рж╕рж╛ржерзЗ ржирж┐ржпрж╝ржорж┐ржд ржЪрзЗржХ-ржЖржк ржХрж░рзБржиред ржЖржкржирж┐ ржпржжрж┐ ржХрзЛржирзЛ ржЕрж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ рж▓ржХрзНрж╖ржг ржЕржирзБржнржм ржХрж░рзЗржи рждрж╛рж╣рж▓рзЗ ржЖржкржирж╛рж░ ржбрж╛ржХрзНрждрж╛рж░рзЗрж░ рж╕рж╛ржерзЗ ржкрж░рж╛ржорж░рзНрж╢ ржХрж░рзБржиред

                            ''')
    elif score=='30%': st.info('''
                                ржЖржорж╛ржжрзЗрж░ ржмрж░рзНрждржорж╛ржи ржорзВрж▓рзНржпрж╛ржпрж╝ржирзЗ ржЖржкржирж╛рж░ рж╕рзНржЯрзНрж░рзЛржХ рж╣ржмрж╛рж░ рж╕ржорзНржнрж╛ржмржирж╛ ржорж╛ржЭрж╛рж░рж┐ (30%)ред рж╣ржарж╛рзО рж╢ржХрзНрждрж┐ ржирж╛ ржкрж╛ржУрзЯрж╛, ржмрж┐ржнрзНрж░рж╛ржирзНрждрж┐, ржжрзЗржЦрждрзЗ рж╕ржорж╕рзНржпрж╛, рж╣рж╛ржБржЯрж╛ ржмрж╛ рждрзАржмрзНрж░ ржорж╛ржерж╛ржмрзНржпржерж╛рж░ ржорждрзЛ рж╕рзНржЯрзНрж░рзЛржХрзЗрж░ рж▓ржХрзНрж╖ржг рж╕ржорзНржкрж░рзНржХрзЗ рж╕ржЪрзЗрждржи рж╣ржУржпрж╝рж╛ 
                                ржЕрждрзНржпржирзНржд ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржгред рж╕рзНржмрж╛рж╕рзНржерзНржп ржкрж░рзАржХрзНрж╖рж╛/ржЪрзЗржХ ржЖржк ржПржмржВ ржкрзНрж░рж╕рзНржЯрзНрж░рзЛржХ ржкрзНрж░рждрж┐рж░рзЛржз ржХрж░рждрзЗ ржЖржкржирж╛рж░ ржбрж╛ржХрзНрждрж╛рж░рзЗрж░ рж╕рж╛ржерзЗ ржкрж░рж╛ржорж░рзНрж╢ ржХрж░рзБржиред ржпржжрж┐ржУ ржПрж░ ржорж╛ржирзЗ ржПржЗ ржиржпрж╝ ржпрзЗ ржЖржкржирж╛рж░ рж╕рзНржЯрзНрж░рзЛржХ рж╣ржпрж╝рзЗржЫрзЗ, рждржмрзЗ ржЖржкржирж┐ ржпрзЗ рж▓ржХрзНрж╖ржгржЧрзБрж▓рж┐рж░ 
                                рж╕ржорзНржорзБржЦрзАржи рж╣ржЪрзНржЫрзЗржи рж╕рзЗржЬржирзНржп ржЖржкржирж╛рж░ ржЪрзЗржХ ржЖржк ржкрзНрж░ржпрж╝рзЛржЬржиред
                            ''')
    else: st.info('''
                    ржЖржорж╛ржжрзЗрж░ ржмрж░рзНрждржорж╛ржи ржорзВрж▓рзНржпрж╛ржпрж╝ржирзЗ ржЖржкржирж╛рж░ рж╕рзНржЯрзНрж░рзЛржХ рж╣ржмрж╛рж░ рж╕ржорзНржнрж╛ржмржирж╛ ржЕржирзЗржХ ржмрзЗрж╢рж┐ред ржПржЯрж┐ ржПржХржЯрж┐ ржорзЗржбрж┐ржХрзЗрж▓ ржЗржорж╛рж░рзНржЬрзЗржирзНрж╕рж┐ ржмрж╛ ржЬрж░рзБрж░рж┐ ржЕржмрж╕рзНржерж╛ред ржЖржкржирж┐ ржпржжрж┐ рж╢рж░рзАрж░рзЗрж░ ржПржХржкрж╛рж╢рзЗ рж╣ржарж╛рзО рж╢ржХрзНрждрж┐ ржирж╛ ржкрж╛ржУрзЯрж╛, ржХржерж╛ ржмрж▓рждрзЗ ржЕрж╕рзБржмрж┐ржзрж╛, ржорж╛ржерж╛ ржШрзЛрж░рж╛ ржмрж╛ 
                    ржнрж╛рж░рж╕рж╛ржорзНржп рж╣рж╛рж░рж╛ржирзЛрж░ ржорждрзЛ ржХрзЛржирзЛ рж▓ржХрзНрж╖ржг ржЕржирзБржнржм ржХрж░рзЗржи рждржмрзЗ ржЕржмрж┐рж▓ржорзНржмрзЗ ржбрж╛ржХрзНрждрж╛рж░рзЗрж░ ржкрж░рж╛ржорж░рзНрж╢ ржирж┐ржиред ржирж┐ржХржЯрж╕рзНрже рж╣рж╛рж╕ржкрж╛рждрж╛рж▓рзЗ ржпрж╛ржи ржмрж╛ ржЕржмрж┐рж▓ржорзНржмрзЗ ржЬрж░рзБрж░рж┐ ржмрж┐ржнрж╛ржЧрзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржиред
                ''')

    st.write(' ')    
    st.warning('''
                ржмрж┐. ржжрзНрж░ :  ржоржирзЗ рж░рж╛ржЦржмрзЗржи, ржПржЗ ржоржирзНрждржмрзНржпржЧрзБрж▓рзЛ рж╢рзБржзрзБржорж╛рждрзНрж░ ржирж┐рж░рзНржжрзЗрж╢ржирж╛рж░ ржЬржирзНржпред рж╕рзНржЯрзНрж░рзЛржХрзЗрж░ рж▓ржХрзНрж╖ржгржЧрзБрж▓рзЛ ржмрзНржпрж╛ржкржХржнрж╛ржмрзЗ ржкрж░рж┐ржмрж░рзНрждрж┐ржд рж╣рждрзЗ ржкрж╛рж░рзЗ ржПржмржВ ржмрж┐ржнрж┐ржирзНржи ржХрж╛рзНрж░ржгрзЗ рж╕рзНржЯрзНрж░рзЛржХрзЗрж░ ржорж╛рждрзНрж░рж╛ ржЙрж▓рзНрж▓рзЗржЦржпрзЛржЧрзНржпржнрж╛ржмрзЗ ржкрзНрж░ржнрж╛ржмрж┐ржд рж╣рждрзЗ ржкрж╛рж░рзЗред ржирж┐ржпрж╝ржорж┐ржд ржЪрж┐ржХрж┐рзОрж╕рж╛ ржкрж░рж╛ржорж░рзНрж╢ ржПржмржВ 
               ржХрзЛржирзЛ рж╕рждрж░рзНржХрждрж╛ рж▓ржХрзНрж╖ржгрзЗрж░ ржХрзНрж╖рзЗрждрзНрж░рзЗ рждрж╛рзОржХрзНрж╖ржгрж┐ржХ ржмрзНржпржмрж╕рзНржерж╛ ржЧрзНрж░рж╣ржг ржЕржкрж░рж┐рж╣рж╛рж░рзНржпред ржЖржорж░рж╛ ржПржЗ ржкрж░рж┐ржорж╛ржкрзЗрж░ ржЬржирзНржп ржЖржорзЗрж░рж┐ржХрж╛ржи рж╕рзНржЯрзНрж░рзЛржХ ржЕрзНржпрж╛рж╕рзЛрж╕рж┐ржпрж╝рзЗрж╢ржи (ASA) ржжрзНржмрж╛рж░рж╛ ржПржХржЯрж┐ ржкрзНрж░ржгрзАржд рж╕рзНржХрзЗрж▓ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗржЫрж┐ред рж╕рзНржЯрзНрж░рзЛржХрзЗрж░┬аржЭрзБржБржХрж┐┬аржмрзНржпржмрж╕рзНржерж╛ржкржирж╛ ржХрж░рж╛рж░ ржХрзНрж╖рзЗрждрзНрж░рзЗ ржкрзНрж░рж╛ржержорж┐ржХ 
               рж▓ржХрзНрж╖ржг рж╕ржирж╛ржХрзНрждржХрж░ржг ржПржмржВ ржкрзНрж░рждрж┐рж░рзЛржз ржЪрж╛ржмрж┐ржХрж╛ржарж┐ред
                ''')
    st.info('ржбрзЗржЯрж╛ рж╕ржлрж▓ржнрж╛ржмрзЗ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!!')
    st.markdown(get_table_download_link(finalised_data), unsafe_allow_html=True)
    

 
    

  
    
    
